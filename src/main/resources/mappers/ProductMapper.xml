<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
                       
<!-- Product, Price table에 접근하는 sql -->  
                      
<!-- 네임스페이스(사용영역) 설정 -->
<mapper namespace="kr.or.kosta.levin.product">
	
	<!-- 전체상품 조회 -->
	<select id="listByPage" parameterType="SearchPagination" resultType="Product" >
		SELECT productId, 
			   productNameKor, 
			   price, 
			   kind,
			   totalQuantity "totalQuantity" 
		FROM   (SELECT Ceil(ROWNUM / #{perPageNum}) request_page, 
               		   productId, 
               		   productNameKor, 
               		   price, 
               		   kind,
               		   totalQuantity 
        		FROM   (SELECT pro.product_id       productId, 
                       		   pro.product_name_kor productNameKor, 
                       		   pri.price            price, 
                       		   pro.kind             kind,
                       		   pro.total_quantity   totalQuantity
                		FROM   levin_products pro 
                       	INNER JOIN levin_prices pri 
                        ON pro.product_id = pri.product_id
                        <if test="searchKeyword != null">
							WHERE pro.kind = #{searchKeyword}
						</if>
                		ORDER  BY pro.product_id)) 
		WHERE  request_page = #{currentPage}
	</select>
	
	<!-- 검색해온 상품 갯수 조회 -->
	<select id="countBySearch"  parameterType="SearchPagination" resultType="int">
		SELECT COUNT(product_id) count 
		FROM   levin_products
		<if test="searchKeyword != null">
				WHERE kind = #{searchKeyword}
		</if>
	</select>
	
	<!-- 상품 상세보기 -->
	<select id="getProduct" parameterType="String" resultType="Product" >
		SELECT pro.product_id       productId, 
       		   pro.product_name_kor productNameKor, 
       		   pro.product_name_eng productNameEng, 
       		   pro.alcohol          alcohol, 
       		   pro.kind             kind, 
       		   pro.sugar_content    sugarContent, 
       		   pro.body, 
       		   pro.vintage, 
       		   pro.grape_kind       grapeKind, 
       		   pro.total_quantity   totalQuantity, 
       		   pro.winery, 
       		   pri.price, 
       		   reg.region_id        regionId, 
       		   reg.region_name      regionName 
		FROM   levin_products pro 
        inner join levin_prices pri 
                ON pro.product_id = pri.product_id 
       	inner join levin_regions reg 
               ON pro.region_id = reg.region_id 
		WHERE  pro.product_id = #{productId}
	</select>
	
	<!-- 상품 문의글 조회 -->
	<select id="listByPageQna" parameterType="map" resultType="ProductQna" >
		SELECT  qnaId, 
       		    productId, 
        	    writer, 
        		title,
        		content,
        		regdate,
        		deleteYn,
        		privateYn 
      	FROM   (SELECT Ceil(rownum / 5) request_page, 
               		   qnaId, 
               		   productId, 
               		   writer, 
               		   title,
               		   content,
               		   regdate,
               		   deleteYn,
                       privateYn
               FROM   (SELECT  qna_id qnaId,
                               product_id productId,
                               writer,
                               title,
                               content,
                               TO_CHAR(regdate, 'yyyy-mm-dd') regdate,
                               delete_yn deleteYn,
                               private_yn privateYn 
                       FROM   levin_product_qnas 
                       WHERE  qna_id NOT IN (SELECT child_id 
                                             FROM   levin_product_qnas_comments)                         
                      and product_id = #{productId} 
                      ORDER  BY qna_id DESC)) 
		WHERE  request_page = #{currentPage}
	</select>
	
	<!-- 검색해온 상품 문의글 갯수 조회 -->
	<select id="countBySearchQna"  parameterType="String" resultType="int">
		SELECT COUNT(qna_id) count 
		FROM   levin_product_qnas
		WHERE  product_id NOT IN (SELECT child_id 
                          FROM   levin_product_qnas_comments)                         
		and product_id = #{productId}
	</select>
	
	<!-- 상품 문의 댓글 조회 -->
	<select id="listQnaComment" parameterType="map" resultType="ProductQnaComment" >
		SELECT qnas.qna_id     	commentId,
			   qnas.product_id  productId, 
       		   qnas.content     content,
       		   qnas.writer      writer, 
       		   TO_CHAR(qnas.regdate, 'yyyy-mm-dd')     regdate, 
       		   qnas.delete_yn   deleteYn, 
       		   qnas.private_yn  privateYn 
		FROM   levin_product_qnas qnas 
        full join levin_product_qnas_comments comms 
               ON qnas.qna_id = comms.child_id 
		WHERE  comms.parent_id = #{qnaId}
		AND    qnas.product_id = #{productId}
	</select>
	
	<!-- 상품 문의 등록 -->
	<insert id="createQna" parameterType="ProductQna">
		INSERT INTO levin_product_qnas
		(
					qna_id,
        			product_id,
       				writer,
        			title,
        			private_yn,
        			content,
        			regdate    
		)VALUES(
					qna_id_seq.nextval,
          			#{productId},
					#{writer},
					#{title},
					#{privateYn},
					#{content},
					SYSDATE
		)
	</insert>
	 
	 <!-- 구매후기글 리스트 -->
	<select id="reviewListByPage" parameterType="map" resultType="Review" >
	  SELECT 
      		  reviewId, 
       		  productId,
       		  email,  
      		  title,
       		  content,
       		  grade,
       		  regdate,
       		  deleteYN
      FROM   (SELECT Ceil(rownum / #{perPageNum}) request_page, 
               		 reviewId,
               		 productId, 
               		 email, 
               		 title,
                     content,
                     grade,
               		 regdate,
               		 deleteYN 
              FROM   (SELECT  review_id         reviewId,
              				  product_id		productId, 
                              email, 
                              title,
                              content,
                              grade,
                              TO_CHAR(regdate, 'yyyy-mm-dd') regdate,
                              delete_yn         deleteYN 
                      FROM   levin_reviews
                      WHERE  review_id NOT IN (SELECT child_id
                                                FROM   levin_reviews_comments)                         
                      and 	 product_id = #{productId}
                      ORDER  BY review_id DESC)) 
	   WHERE  request_page = #{currentPage}
	</select>
	
	<!-- 검색해온 구매후기글 갯수 조회 -->
	<select id="reviewCountBySearch"  parameterType="map" resultType="int">
	  SELECT COUNT(review_id) count 
	  FROM   levin_reviews
	  WHERE  review_id NOT IN (SELECT child_id 
                          	   FROM   levin_reviews_comments)                         
	  AND product_id = #{productId}
	</select>
	
	<!-- 구매후기 상세보기 -->
	<select id="readReview" parameterType="int" resultType="Review">
	  SELECT review_id, 
        	 email, 
       	     title, 
       	     content, 
       	     grade, 
       	     To_char(regdate, 'yyyy-mm-dd') regdate 
	  FROM   levin_reviews 
	  WHERE  review_id = #{reviewId} 
	</select>
	
	<!-- 구매후기 등록 -->
	<insert id="createReview" parameterType="Review">
	  INSERT INTO levin_reviews 
      ( 
                        review_id, 
                        product_id, 
                        email, 
                        title, 
                        content, 
                        grade, 
                        regdate, 
                        delete_yn 
      )VALUES( 
                        review_id_seq.NEXTVAL, 
                        #{productId}, 
                        #{email}, 
                        #{title}, 
                        #{content}, 
                        #{grade}, 
                        SYSDATE, 
                        'N' 
      )
	</insert>
	
	<!-- 필터 값 초기화를 위한 조회 : 와인 종류 -->
	<select id="readKindValues" resultType="string">
	  SELECT DISTINCT( kind ) "kind"
		FROM   levin_products  
	</select>
	<!-- 필터 값 초기화를 위한 조회 : 생산지 종류 -->
	<select id="readRegionValues" resultType="map">
	  SELECT region_id		"regionId", 
	       	 region_name 	"regionName"
	    FROM   levin_regions 
	</select>
	<!-- 필터 값 초기화를 위한 조회 : 도수 최대/최소 -->
	<select id="readAlcoholMinMaxValues" resultType="map">
	  SELECT Max(To_number(alcohol)) "max", 
       		 Min(To_number(alcohol)) "min" 
		FROM   levin_products 
	</select>
	<!-- 필터 값 초기화를 위한 조회 : 당도 최대/최소 -->
	<select id="readSugarContentMinMaxValues" resultType="map">
	  SELECT Max(sugar_content) "max", 
      		 Min(sugar_content) "min" 
		FROM   levin_products  
	</select>
	<!-- 필터 값 초기화를 위한 조회 : 바디 최대/최소 -->
	<select id="readBodyMinMaxValues" resultType="map">
	  SELECT Max(BODY) "max", 
		     Min(BODY) "min" 
		FROM   levin_products   
	</select>
	<!-- 필터 값 초기화를 위한 조회 : 가격 최대/최소 -->
	<select id="readPriceMinMaxValues" resultType="map">
	  SELECT Max(price) "max", 
		     Min(price) "min" 
		FROM   levin_prices  
	</select>
	
	<!-- 필터 적용된 목록 조회 -->
	<select id="readFilteredList" parameterType="FilterPagination" resultType="Product">
		SELECT productid, 
		       productnamekor, 
		       price, 
		       kind, 
		       totalquantity "totalQuantity" 
		FROM   (SELECT Ceil(ROWNUM / #{perPageNum}) request_page, 
		               productid, 
		               productnamekor, 
		               price, 
		               kind, 
		               totalquantity 
		        FROM   (SELECT pro.product_id       productId, 
		                       pro.product_name_kor productNameKor, 
		                       pri.price            price, 
		                       pro.kind             kind, 
		                       pro.region_id        region_id, 
		                       pro.total_quantity   totalQuantity 
		                FROM   levin_products pro 
		                       inner join levin_prices pri 
		                               ON pro.product_id = pri.product_id 
		                WHERE  alcohol BETWEEN #{alcohol.min} AND #{alcohol.max}
		                       AND sugar_content BETWEEN #{sugarContent.min} AND #{sugarContent.max}
		                       AND body BETWEEN #{body.min} AND #{body.max}  
		                       AND price BETWEEN #{price.min} AND #{price.max} 
		               	<if test="kind != null">
		                	   AND kind = #{kind}
		                </if>
		                <if test="regionId != null">
		                       AND region_id = #{regionId} 
		                </if>
		                ORDER  BY pro.product_id)) 
		WHERE  request_page = #{currentPage}
	</select>
</mapper>